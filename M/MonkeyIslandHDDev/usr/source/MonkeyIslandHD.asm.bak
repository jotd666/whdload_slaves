;*---------------------------------------------------------------------------
;  :Program.	MonkeyIslandHD.asm
;  :Contents.	Slave for "MonkeyIsland"
;  :Author.	JOTD, from Wepl sources
;  :Original	v1 
;  :Version.	$Id: MonkeyIslandHD.asm 1.2 2002/02/08 01:18:39 wepl Exp wepl $
;  :History.	%DATE% started
;  :Requires.	-
;  :Copyright.	Public Domain
;  :Language.	68000 Assembler
;  :Translator.	Devpac 3.14, Barfly 2.9
;  :To Do.
;---------------------------------------------------------------------------*

	INCDIR	Include:
	INCDIR	osemu:
	INCLUDE	whdload.i
	INCLUDE	whdmacros.i
	INCLUDE	lvo/dos.i

	IFD BARFLY
	OUTPUT	"MonkeyIsland.slave"
	BOPT	O+				;enable optimizing
	BOPT	OG+				;enable optimizing
	BOPT	ODd-				;disable mul optimizing
	BOPT	ODe-				;disable mul optimizing
	BOPT	w4-				;disable 64k warnings
	BOPT	wo-			;disable optimizer warnings
	SUPER
	ENDC

;============================================================================

CHIPMEMSIZE	= $80000
FASTMEMSIZE	= $80000
NUMDRIVES	= 1
WPDRIVES	= %0000

POINTERTICKS=1
BLACKSCREEN
;DISKSONBOOT
DOSASSIGN
HDINIT
;HRTMON
IOCACHE		= 25000
;MEMFREE	= $200
;NEEDFPU
;SETPATCH
BOOTDOS
CACHE

; crk: $63514

;============================================================================


slv_Version	= 16
slv_Flags	= WHDLF_NoError|WHDLF_Examine
slv_keyexit	= $5D	; num '*'

	INCLUDE	kick13.s

;============================================================================

	IFD BARFLY
	DOSCMD	"WDate  >T:date"
	ENDC

DECL_VERSION:MACRO
	dc.b	"3.4"
	IFD BARFLY
		dc.b	" "
		INCBIN	"T:date"
	ENDC
	ENDM

	dc.b	"$","VER: slave "
	DECL_VERSION
	dc.b	$A,$D,0

slv_name		dc.b	"The Secret Of Monkey Island",0
slv_copy		dc.b	"1990 LucasFilm Games",0
slv_info		dc.b	"Install & fix by JOTD",10,10
		dc.b	"Thanks to Olivier Schott for testing",10,10
		dc.b	"Version "
		DECL_VERSION
		dc.b	0
slv_CurrentDir:
	dc.b	"data",0
	EVEN

_program:
	dc.b	"Monkey_Island",0
_args		dc.b	10
_args_end
	dc.b	0
	EVEN

;============================================================================

	;initialize kickstart and environment

_bootdos
	move.l	(_resload),a2		;A2 = resload

	;open doslib
		lea	(_dosname,pc),a1
		move.l	(4),a6
		jsr	(_LVOOldOpenLibrary,a6)
		move.l	d0,a6			;A6 = dosbase

	;remove dos.Delete function so there are less os swaps

;		move.l	a6,a0
;		add.w	#_LVODeleteFile+2,a0
;		lea	_deletefile(pc),a1
;		move.l	a1,(a0)

	;load exe
		lea	_program(pc),a0
		move.l	a0,d1
		jsr	(_LVOLoadSeg,a6)
		move.l	d0,d7			;D7 = segment
		beq	_end			;file not found


	;patch here
		bsr	_patchit

	;call
		move.l	d7,a1
		add.l	a1,a1
		add.l	a1,a1
		lea	(_args,pc),a0
		move.l	(4,a7),d0		;stacksize
		sub.l	#5*4,d0			;required for MANX stack check
		movem.l	d0/d7/a2/a6,-(a7)
		moveq	#_args_end-_args,d0
		jsr	(4,a1)
		movem.l	(a7)+,d1/d7/a2/a6

	;remove exe
		move.l	d7,d1
		jsr	(_LVOUnLoadSeg,a6)

		pea	TDREASON_OK
		bra.b	_abort

_end
		jsr	(_LVOIoErr,a6)
		pea	_program(pc)
		move.l	d0,-(a7)
		pea	TDREASON_DOSREAD
_abort:
		move.l	(_resload,pc),-(a7)
		add.l	#resload_Abort,(a7)
		rts

; < d1 - file pos
; < a0 - name
; < a1 - buffer

_cb_dosRead
	movem.l	d0/a0-a3,-(a7)
	cmp.b	#'1',5(a0)	; DISK01.LEC
	beq.b	.disk01
	cmp.b	#'1',11(a0)	; Rooms/DISK01.LEC
	beq.b	.disk01
	bra.b	.skip
.disk01
	cmp.l	#$63847,d1	; SP version
	beq.b	.crack
	cmp.l	#$636F0,d1	; UK version
	beq.b	.crack
	cmp.l	#$58567,d1	; FR version
	beq.b	.crack
	cmp.l	#$63DD0,d1	; GER version
	beq.b	.crack
	cmp.l	#$63CB2,d1	; IT version
	beq.b	.crack
	bra.b	.skip
.crack
	cmp.b	#$84,(a1)
	bne.b	.skip		; check
	move.w	#$ff,d0
	move.l	a1,a0
.copy
	move.b	#$69,(a1)+
	dbf	D0,.copy
	move.b	#$FE,$29(a0)
	move.b	#$C9,$FF(a0)
.skip
	movem.l	(a7)+,d0/a0-a3
	rts

crack_stub
	move.w	0(a7),D1
	rts

_patchit:
	patch	$200,crack_stub
	move.l	d7,A3
	add.l	A3,A3
	add.l	A3,A3

	move.l	A3,A0
	move.l	A0,A1
	add.l	#100000,A1
	lea	.access_fault(pc),A2
	moveq.l	#8,D0
	bsr	_hexsearch
	cmp.l	#0,A0
	beq.b	.skipaf

	pea	_avoid_af_1(pc)
	move.w	#$4EB9,(A0)+
	move.l	(A7)+,(A0)
.skipaf
	rts

.access_fault:
	dc.l	$10182948,$5C2A0440

_avoid_af_1:
	move.l	D1,-(A7)
	move.l	A0,D1
	rol.l	#8,D1
	tst.b	D1
	beq.b	.ok
	cmp.b	_expmem(pc),D1
	bne.b	.avoid		; avoid access fault
.ok
	; stolen code
	move.b	(A0)+,D0
.avoid
	move.l	A0,($5C2A,A4)
	move.l	(A7)+,D1
	rts

_deletefile:
	moveq.l	#-1,D0
	rts


;< A0: start
;< A1: end
;< A2: bytes
;< D0: length
;> A0: address or 0 if not found

_hexsearch:
	movem.l	D1/D3/A1-A2,-(A7)
.addrloop:
	moveq.l	#0,D3
.strloop:
	move.b	(A0,D3.L),D1	; gets byte
	cmp.b	(A2,D3.L),D1	; compares it to the user string
	bne.b	.notok		; nope
	addq.l	#1,D3
	cmp.l	D0,D3
	bcs.b	.strloop

	; pattern was entirely found!

	bra.b	.exit
.notok:
	addq.l	#1,A0	; next byte please
	cmp.l	A0,A1
	bcc.b	.addrloop	; end?
	sub.l	A0,A0
.exit:
	movem.l	(A7)+,D1/D3/A1-A2
	rts

; < D0: numbers of vertical positions to wait
_beamdelay
.bd_loop1
	move.w  d0,-(a7)
        move.b	$dff006,d0	; VPOS
.bd_loop2
	cmp.b	$dff006,d0
	beq.s	.bd_loop2
	move.w	(a7)+,d0
	dbf	d0,.bd_loop1
	rts

;============================================================================


;============================================================================

	END
